You are given N, and for a given N x N chessboard, find a way to place N queens such that no queen can attack any other queen on the chess board. 
A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. 
You have to print all such configurations.

Sample Input 1:
4
Sample Output 1 :
0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 
0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 

#include <iostream>
using namespace std;
int board[11][11];

bool isSafe(int n, int row, int col)
{
    //same col
    for(int i=row-1;i>=0;i--)
    {
        if(board[i][col] == 1)
            return false;
    }
    
    //upper left diagonal
    for(int i=row-1, j=col-1;i>=0 && j>=0; i--, j--)
    {
        if(board[i][j]==1)
            return false;
    }
    
    // upper right diagonal
    for(int i=row-1, j=col+1;i>=0 && j<n; i--, j++)
    {
        if(board[i][j] == 1)
            return false;
    }
    return true;
}

void nqueenhelp(int n, int row)
{
    if(row==n)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cout<<board[i][j]<<" ";
            }
        }
        cout<<endl;
        return;
    }
    
    for(int j=0;j<n;j++)
    {
        if(isSafe(n,row,j))
        {
            board[row][j]=1;
            nqueenhelp(n,row+1);
            board[row][j]=0;
            
        }
    }
    return;
}


void placeNQueens(int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
            board[i][j]=0;
    }
    
    nqueenhelp(n,0);
}

int main()
{
	int n;
    cin >> n;
	placeNQueens(n);

}
